#!/usr/bin/env python

# TODO This is a fairly rough script that I haven't gotten around to cleaning up.
import glob
from optparse import OptionParser
import logging
from logging import debug, critical, warning
import re
from os import chdir, getcwd, unlink
from os.path import (abspath, basename, exists, isdir)
from os.path import join as opj
from shutil import move
import sys
from traceback import format_exc

from osgbuild.utils import (checked_call, safe_makedirs,
                                 unchecked_call, unslurp, slurp) 

# Constants:
VDT_WWW = "/p/vdt/public/html"
DEFAULT_UPSTREAM_ROOT = opj(VDT_WWW, "upstream")
DEFAULT_LOG_LEVEL = logging.INFO

class Error(Exception):
    """Base class for expected exceptions. Caught in main(); may include a
    traceback but will only print it if debugging is enabled.
    
    """
    def __init__(self, msg, tb=None):
        self.msg = msg
        if tb is None:
            self.traceback = format_exc()

    def __repr__(self):
        return repr((self.msg, self.traceback))

    def __str__(self):
        return str(self.msg)


class UsageError(Error):
    def __init__(self, msg):
        Error.__init__(self, "Usage error: " + msg + "\n")


def download_srpm(url, output=None):
    """Download an srpm from url. Return the filename."""
    # TODO: This should probably use urllib2
    if output is None:
        output = basename(url)
    cmd = ["wget", "-q", url, "-O", output]
    checked_call(cmd)
    return output


def srpm_nvr(srpm):
    """Extract the NVR (Name, Version, Release) from the name of an srpm."""
    base_srpm = basename(srpm)
    match = re.match(r"""(.+)-(.+)-(.+)\.src\.rpm$""",
                     base_srpm)
    if match:
        name, version, release = match.group(1,2,3)
        return (name, version, release)
    else:
        raise Error("Unable to extract NVR from SRPM filename " +
                    base_srpm)


def make_svn_tree(srpm, url, extract_spec=False, diff_spec=False, provider=None):
    """Create an svn tree for the srpm and populate it as follows:
    $name/osg/*.spec        - the spec file as extracted from the srpm
                              (if extract_spec is True)
    $name/upstream/*.source - the location of the srpm under the upstream cache
                              as well as a comment describing where it's from

    """
    name, version = srpm_nvr(srpm)[0:2]
    upstream_dir = opj(name, "upstream")
    abs_srpm = abspath(srpm)
    base_srpm = basename(srpm)
    
    if not exists(name):
        checked_call(["svn", "mkdir", name])
    if not exists(upstream_dir):
        checked_call(["svn", "mkdir", upstream_dir])

    if provider is None:
        if re.search(r'emisoft\.web\.cern\.ch', url):
            provider_name = 'emi'
        elif re.search(r'fedoraproject\.org', url):
            provider_name = 'epel'
        else:
            provider_name = 'developer'
    else:
        provider_name = provider

    source_filename = opj(upstream_dir, provider_name+".srpm.source")

    source_contents = "# Downloaded from '%s'\n%s" % (url, opj(name, version, srpm))
    source_contents = opj(name, version, srpm) + "\n"

    if exists(source_filename):
        print "Source file exists. Saving as %s.old" % source_filename
        move(source_filename, source_filename + ".old")
        unslurp(source_filename, source_contents)
    else:
        unslurp(source_filename, source_contents)
        checked_call(["svn", "add", source_filename])
    if len(glob.glob(opj(upstream_dir, "*.source"))) > 1:
        print "More than one .source file found in upstream dir."
        print "Examine them to make sure there aren't duplicates."

    osg_dir = opj(name, "osg")
    if diff_spec:
        # TODO: This needs touchups.
        if not isdir(osg_dir):
            print "No osg dir exists. Not diffing."
        else:
            old_dir = getcwd() # pushd
            chdir(osg_dir)
            for s in glob.glob("*.spec"):
                move(s, s + ".old")
            checked_call("rpm2cpio '%s' | cpio -ivd '*.spec'" % abs_srpm, shell=True)
            if exists(s + ".old"):
                for s in glob.glob("*.spec"):
                    move(s, s + ".new")
                    print ("Old spec file found. Examine difference " +
                           "between %s.old and %s.new and manually merge " +
                           "changes.\nDiff follows:\n") % (s, s)
                    unchecked_call(["diff", s + ".old", s + ".new"])
            chdir(old_dir) # popd
    elif extract_spec:
        if not isdir(osg_dir):
            checked_call(["svn", "mkdir", osg_dir])
        old_dir = getcwd() # pushd
        chdir(osg_dir)
        checked_call("rpm2cpio '%s' | cpio -ivd '*.spec'" % abs_srpm, shell=True)
        checked_call("svn add *.spec", shell=True)
        chdir(old_dir) # popd


def move_to_cache(srpm, upstream_root):
    """Move the srpm to the upstream cache."""
    name, version = srpm_nvr(srpm)[0:2]
    base_srpm = basename(srpm)
    upstream_dir = opj(upstream_root, name, version)
    safe_makedirs(upstream_dir)
    dest_file = opj(upstream_dir, base_srpm)
    if exists(dest_file):
        unlink(dest_file)
    move(srpm, dest_file)


def main(argv=None):
    if argv is None:
        argv = sys.argv
    try:
        parser = OptionParser("""
   %prog [options] <upstream-url>

%prog should be called from an SVN checkout and given the URL of an upstream SRPM.
will create and populate the appropriate directories in SVN as well as
downloading and putting the SRPM into the upstream cache.
""")
        parser.add_option(
            "-d", "--diff-spec", action="store_true",
            help="Extract the spec file from the SRPM and put it into an "
            "osg/ subdirectory under a new name. If a spec file already "
            "exists, diff the two.")
        parser.add_option(
            "-e", "--extract-spec", action="store_true",
            help="Extract the spec file from the SRPM and put it into an "
            "osg/ subdirectory.")
        parser.add_option(
            "--loglevel",
            help="The level of logging the script should do. " +
            "Valid values are DEBUG,INFO,WARNING,ERROR,CRITICAL")
        parser.add_option(
            "-o", "--output",
            help="The filename the upstream-url should be saved as.")
        parser.add_option(
            "-p", "--provider",
            help="Who provided the SRPM being imported. For example, 'epel'. "
            "This is used to name the .source file in the 'upstream' directory. "
            "The default is 'epel' if the SPRM is from EPEL, 'emi' if the SRPM is from EMI, and 'developer' otherwise.")
        parser.add_option(
            "-u", "--upstream", default=DEFAULT_UPSTREAM_ROOT,
            help="The base directory to put the upstream sources under. "
            "Default: %default")

        options, pos_args = parser.parse_args(argv[1:])

        if options.loglevel:
            try:
                loglevel = int(getattr(logging, options.loglevel.upper()))
            except (TypeError, AttributeError):
                raise UsageError("Invalid log level")
        else:
            loglevel = DEFAULT_LOG_LEVEL
        logging.basicConfig(format="%(levelname)s:" +
                            basename(sys.argv[0]) +
                            ":%(message)s", level=loglevel)
        
        try:
            upstream_url = pos_args[0]
        except IndexError:
            raise UsageError("Required argument <upstream-url> not provided")

        if unchecked_call("svn info &>/dev/null", shell=True):
            raise Error("Must be called from an svn checkout!")

        if not re.match(r'(http|https|ftp):', upstream_url):
            raise UsageError("upstream-url is not a valid url")
        
        srpm = download_srpm(upstream_url, options.output)
        make_svn_tree(srpm, upstream_url, options.extract_spec, options.diff_spec, options.provider)
        move_to_cache(srpm, options.upstream)

    except UsageError, e:
        parser.print_help()
        print >>sys.stderr, str(e)
        return 2
    except SystemExit, e:
        return e.code
    except KeyboardInterrupt:
        print >>sys.stderr, "Interrupted"
        return 3
    except Error, e:
        critical(str(e))
        debug(e.traceback)
    except Exception, e:
        critical("Unhandled exception: %s", str(e))
        critical(format_exc())
        return 1

    return 0

if __name__ == "__main__":
    sys.exit(main())

