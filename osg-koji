#!/usr/bin/env python

import glob
import os
import shutil
import sys
import tempfile
import urllib2

from optparse import OptionParser

from osgbuild.constants import (
    DATA_FILE_SEARCH_PATH,
    KOJI_USER_CONFIG_DIR,     # old koji config dir
    OSG_KOJI_USER_CONFIG_DIR) # new koji config dir (created by this script)
from osgbuild.utils import (
    ask_yn,
    backtick,
    find_file,
    checked_call,
    safe_make_backup,
    safe_makedirs,
    slurp,
    unslurp)



# subject, openssl 0.9.8 hash, openssl 1.x hash
DOEGRIDS_CA_CERTS = [
    {'subject': "/DC=net/DC=ES/O=ESnet/OU=Certificate Authorities/CN=ESnet Root CA 1",
    '098hash': "d1b603c3",
    '1xhash': "0119347c"},
    {'subject': "/DC=org/DC=DOEGrids/OU=Certificate Authorities/CN=DOEGrids CA 1",
    '098hash': "1c3f2ca8",
    '1xhash': "12d0da68"}]
DIGICERT_CA_CERTS = [
    {'subject': "/C=US/O=DigiCert Inc/OU=www.digicert.com/CN=DigiCert Assured ID Root CA",
    '098hash': "69105f4f",
    '1xhash': "b1159c4c"},
    {'subject': "/DC=com/DC=DigiCert-Grid/O=DigiCert Grid/CN=DigiCert Grid CA-1",
    '098hash': "c7a717ce",
    '1xhash': "82c2b224"},
    {'subject': "/DC=com/DC=DigiCert-Grid/O=DigiCert Grid/CN=DigiCert Grid Root CA",
    '098hash': "2694e4f2",
    '1xhash': "74a04bb6"},
    {'subject': "/C=US/O=DigiCert Grid/OU=www.digicert.com/CN=DigiCert Grid Trust CA",
    '098hash': "38f7145f",
    '1xhash': "67707166"}]
CA_CERTS = DOEGRIDS_CA_CERTS + DIGICERT_CA_CERTS

CSL_KOJI_PATH = "/p/vdt/workspace/koji-1.6.0"

DOEGRIDS_TARBALL_URL = "https://pki1.doegrids.org/Other/doegrids.tar"
DIGICERT_GRID_BASEURL = "http://www.digicert-grid.com"
GRID_CERTS_DIR = "/etc/grid-security/certificates"

OLD_CLIENT_CERT_FILE = os.path.join(KOJI_USER_CONFIG_DIR, "client.crt")
GLOBUS_DIR = os.path.expanduser("~/.globus")
KOJI_CONFIG_FILE = "config"
CLIENT_CERT_FILE = "client.crt"
SERVER_CERT_FILE = "osg-ca-bundle.crt"

PROGRAM_NAME = os.path.basename(sys.argv[0])

RUN_SETUP_MSG = """\
Run '%s setup' to set up a koji environment containing the
necessary files in %s.""" % (PROGRAM_NAME, OSG_KOJI_USER_CONFIG_DIR)

EXTRA_HELP = """
%s adds the following commands:
	setup                     Initialize the configuration in %s
                                  See "setup --help" for options.
""" % (PROGRAM_NAME, OSG_KOJI_USER_CONFIG_DIR)


class Error(Exception):
    """Base class for expected exceptions."""
    pass


def setup_parse_args(args):
    """Parse the arguments given on the command line for the setup command.
    Return the 'options' object, containing the keyword arguments.
    """

    parser = OptionParser("""%prog setup [options]""")

    parser.add_option(
        "-u", "--usercert", "--user-cert", dest="user_cert", metavar="FILE",
        default=os.path.join(GLOBUS_DIR, "usercert.pem"),
        help="Path to user certificate file. Default: %default")

    parser.add_option(
        "-k", "--userkey", "--user-key", dest="user_key", metavar="FILE",
        default=os.path.join(GLOBUS_DIR, "userkey.pem"),
        help="Path to user private key file. Default: %default")

    options = parser.parse_args(args)[0]

    return options


def get_openssl_version():
    """Return the version of OpenSSL as a (major, minor, release) tuple"""
    version_output = backtick("openssl version")
    # TODO could use some error checking
    version = version_output.strip().split(' ')[1]
    major, minor, release = version.split('.', 2)
    return major, minor, release


def checked_download(dest, url, descr=None):
    """Download a file from 'url' to 'dest'. 'descr' is an optional text
    description of a file, for a more informative error message.

    """
    if os.path.isdir(dest):
        realdest = os.path.join(dest, os.path.basename(url))
    else:
        realdest = dest
    try:
        urlhandle = urllib2.urlopen(url)
        realdesthandle = open(realdest, 'w')
        realdesthandle.write(urlhandle.read())
        realdesthandle.close()
    except Exception, e:
        if descr:
            raise Error("Error downloading %s (from %s to %s): %s" % (descr, url, realdest, str(e)))
        else:
            raise Error("Error downloading from %s to %s: %s" % (url, realdest, str(e)))
    return realdest

def create_ca_bundle(working_dir="."):
    """Create the ca-bundle.crt file in working_dir"""
    if os.path.isdir(GRID_CERTS_DIR):
        # Use local grid certificates
        certs_dir = GRID_CERTS_DIR
    else:
        certs_dir = os.path.join(working_dir, 'certs')
        # Download DOE grid certificates
        tarball_name = checked_download(working_dir, DOEGRIDS_TARBALL_URL, "DOEGrids certs tarball")
        checked_call(["tar", "xf", tarball_name, "-C", working_dir])
        if (not os.path.isdir(os.path.join(working_dir, 'doegrids')) or
                not glob.glob(os.path.join(working_dir, 'doegrids', '*.0'))):
            raise Error("DOEGrids certs tarball does not have expected contents")
        os.rename(os.path.join(working_dir, 'doegrids'), certs_dir)

        # Download DigiCert grid certificates
        for cert in DIGICERT_CA_CERTS:
            checked_download(certs_dir, os.path.join(DIGICERT_GRID_BASEURL, cert['098hash']+".0"))

    bundle_contents = ""
    openssl_major = int(get_openssl_version()[0])
    for cert in CA_CERTS:
        expected_subject = "subject= " + cert['subject']
        if openssl_major == 0:
            expected_hash = cert['098hash']
        else:
            expected_hash = cert['1xhash']
        cert_fname = cert['098hash'] + ".0"
        cert_path = os.path.join(certs_dir, cert_fname)
        real_subject = backtick(["openssl", "x509", "-in", cert_path, "-noout", "-subject"])
        real_hash = backtick(["openssl", "x509", "-in", cert_path, "-noout", "-hash"])
        if real_subject != expected_subject:
            raise Error(("Subject for %s doesn't match expected:\n"
                         "Expected: %r, got: %r") %
                        (cert_fname, expected_subject, real_subject))
        if real_hash != expected_hash:
            raise Error(("Hash for %s doesn't match expected:\n"
                         "Expected: %r, got: %r") %
                        (cert_fname, expected_hash, real_hash))
        else:
            bundle_contents += slurp(cert_path) + "\n"
    bundle_filename = os.path.join(working_dir, "ca-bundle.crt")
    unslurp(bundle_filename, bundle_contents)
    print "Wrote CA cert bundle %r" % bundle_filename

    return bundle_filename


def setup_koji_config_file():
    """Create the koji config file (if needed)."""
    new_koji_config_path = os.path.join(OSG_KOJI_USER_CONFIG_DIR, KOJI_CONFIG_FILE)
    if (not os.path.exists(new_koji_config_path) or
            ask_yn("Koji configuration file '" + new_koji_config_path + "' already exists. Recreate it?")):
        shutil.copy(find_file("osg-koji-home.conf", DATA_FILE_SEARCH_PATH), new_koji_config_path)


def setup_koji_server_cert():
    """Create the koji server cert file (if needed)."""
    new_server_cert_path = os.path.join(OSG_KOJI_USER_CONFIG_DIR, SERVER_CERT_FILE)
    if (not os.path.exists(new_server_cert_path) or
            ask_yn("Server cert file '" + new_server_cert_path + "' already exists. Recreate it?")):
        working_dir = tempfile.mkdtemp(prefix='osg-koji-setup-')
        safe_make_backup(new_server_cert_path)
        shutil.copy(create_ca_bundle(working_dir), new_server_cert_path)
        shutil.rmtree(working_dir, ignore_errors=True)
    else:
        print "Not writing server cert file %r" % new_server_cert_path


def with_safe_umask(function_to_wrap):
    """decorator to set the umask to 0077 and restore it when we're done"""
    def wrapped_function(*args, **kwargs):
        old_umask = os.umask(0077)
        try:
            return function_to_wrap(*args, **kwargs)
        finally:
            os.umask(old_umask)
    return wrapped_function


@with_safe_umask
def copy_old_client_cert(new_client_cert_path):
    safe_make_backup(new_client_cert_path)
    shutil.copy(OLD_CLIENT_CERT_FILE, new_client_cert_path)

@with_safe_umask
def create_client_cert_from_cert_and_key(new_client_cert_path, user_cert, user_key):
    safe_make_backup(new_client_cert_path)
    os.system("cat %r %r > %r" % (user_cert, user_key, new_client_cert_path))

@with_safe_umask
def create_client_symlink_to_proxy(new_client_cert_path):
    safe_make_backup(new_client_cert_path)
    proxy_filename = '/tmp/x509up_u%d' % os.getuid()
    os.symlink(proxy_filename, new_client_cert_path)


def setup_koji_client_cert(user_cert, user_key):
    """Create or copy the client cert file (if needed)."""
    new_client_cert_path = os.path.join(OSG_KOJI_USER_CONFIG_DIR, CLIENT_CERT_FILE)
    if (os.path.exists(new_client_cert_path) and
            not ask_yn("Client cert file '" + new_client_cert_path + "' already exists. Recreate it?")):

        print "Not writing client cert file %r" % new_client_cert_path
        return

    if (os.path.exists(KOJI_USER_CONFIG_DIR) and
            (os.path.isdir(OSG_KOJI_USER_CONFIG_DIR) and
            not os.path.samefile(KOJI_USER_CONFIG_DIR, OSG_KOJI_USER_CONFIG_DIR)) and
            os.path.isfile(OLD_CLIENT_CERT_FILE)):

        if ask_yn("Copy client cert from '" + OLD_CLIENT_CERT_FILE + "' ?"):
            copy_old_client_cert(new_client_cert_path)
            return

    if ask_yn("Set up symlink to grid proxy?"):
        create_client_symlink_to_proxy(new_client_cert_path)
        print "Proxy symlink created. If using voms-proxy-init, be sure to request an RFC-style proxy (pass -rfc)"
        return

    # if we get here, there's no old cert to copy
    if os.path.isfile(user_cert) and os.path.isfile(user_key):
        create_client_cert_from_cert_and_key(new_client_cert_path, user_cert, user_key)
        print "Created %r from %r and %r" % (new_client_cert_path, user_cert, user_key)
        return

    # if we get here, nothing worked
    print ("""
Could not find user cert (%(user_cert)r) and/or key (%(user_key)r).
You must manually copy your certs:

    cat usercert.pem userkey.pem > %(new_client_cert_path)s
    chmod 0600 %(new_client_cert_path)s

where 'usercert.pem' and 'userkey.pem' are your X.509 public and private keys.

If you wish to use grid proxy authentication, make a symlink from
%(new_client_cert_path)r to your proxy. If using voms-proxy-init, be sure to
request an RFC-style proxy (pass -rfc).
""" % locals())


def run_setup(user_cert, user_key):
    safe_makedirs(OSG_KOJI_USER_CONFIG_DIR)
    setup_koji_config_file()
    setup_koji_server_cert()
    setup_koji_client_cert(user_cert, user_key)

    if (not os.path.exists(KOJI_USER_CONFIG_DIR) and
            ask_yn("Create symlink %s -> %s ?" % (KOJI_USER_CONFIG_DIR, OSG_KOJI_USER_CONFIG_DIR))):

        os.symlink(OSG_KOJI_USER_CONFIG_DIR, KOJI_USER_CONFIG_DIR)



def verify_koji_dir(config_dir):
    for path, descr in [
            (KOJI_CONFIG_FILE, "Koji configuration file"),
            (CLIENT_CERT_FILE, "User certificate file (client cert)"),
            (SERVER_CERT_FILE, "Server certificate file (CA bundle)")]:

        # Note: use lexists because if we're using grid proxies then the
        # CLIENT_CERT_FILE may be a broken symlink--and that's ok
        if not os.path.lexists(os.path.join(config_dir, path)):
            raise Error("%s (%s) not found in config directory (%s).\n%s" % (descr, path, config_dir, RUN_SETUP_MSG))


def main(argv=None):
    if argv is None:
        argv = sys.argv

    # Kind of a hack
    if os.path.exists(CSL_KOJI_PATH):
        os.environ['PATH'] = (os.path.join(CSL_KOJI_PATH, "cli") + os.pathsep + os.environ['PATH'])
        if os.environ.has_key('PYTHONPATH'):
            os.environ['PYTHONPATH'] = (CSL_KOJI_PATH + os.pathsep + os.environ['PYTHONPATH'])
        else:
            os.environ['PYTHONPATH'] = CSL_KOJI_PATH

    try:
        if len(argv) > 1:
            if argv[1] == "setup":
                options = setup_parse_args(argv[2:])
                run_setup(options.user_cert, options.user_key)
            elif argv[1] == "help":
                os.system("koji " + ' '.join(argv[1:]))
                print EXTRA_HELP
            else:
                if os.path.exists(OSG_KOJI_USER_CONFIG_DIR):
                    config_dir = OSG_KOJI_USER_CONFIG_DIR
                elif os.path.exists(KOJI_USER_CONFIG_DIR):
                    config_dir = KOJI_USER_CONFIG_DIR
                else:
                    raise Error("No koji config directory found.\n" + RUN_SETUP_MSG)
                verify_koji_dir(config_dir)
                args = ["--config=" + os.path.join(config_dir, KOJI_CONFIG_FILE), "--authtype=ssl"] + argv[1:]
                os.execlp("koji", "koji", *args)
        else:
            os.system("koji")
            print EXTRA_HELP
    except SystemExit, e:
        return e.code
    except KeyboardInterrupt:
        print >> sys.stderr, "Interrupted"
        return 3
    except Error, e:
        print >> sys.stderr, str(e)
        return 1
    except Exception, e:
        print >> sys.stderr, "Unhandled exception: " + str(e)
        raise

    return 0

if __name__ == "__main__":
    sys.exit(main())

